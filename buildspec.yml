version: 0.2

phases:
  install:
    runtime-versions:
      docker: 19
    commands:
      - curl -o kubectl https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
      - chmod +x ./kubectl
      - mv ./kubectl /usr/local/bin/kubectl
      - mkdir ~/.kube
      - aws eks --region ap-northeast-2 update-kubeconfig --name ms-cluster-staging
      - kubectl get po -n kube-system
  pre_build:
    commands:
      - echo ENV Values
      - echo ---------------------------------
      - echo $AWS_DEFAULT_REGION
      - echo $AWS_ACCOUNT_ID
      - echo $IMAGE_REPO_NAME
      - echo $IMAGE_TAG
      - REPOSITORY_URI=$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com
      - echo ---------------------------------
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $REPOSITORY_URI
  build:
    commands:
      - echo Build started on `date`
      - echo Application Build
      - echo ---------------------------------
      - echo Start Docker
      - docker version
      - echo ---------------------------------
      - echo Building the Docker image...   
      - echo ---------------------------------
      - docker build -t $IMAGE_REPO_NAME .
      - docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
      - echo Build completed on `date`
      - echo ---------------------------------
      - echo Pushing the Docker image...
      - echo ---------------------------------
      - docker push $REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
  post_build:
    commands:
      - AWS_ECR_URI=$REPOSITORY_URI/$IMAGE_REPO_NAME:$IMAGE_TAG
      - sed -i.bak 's#AWS_ECR_URI#'"$AWS_ECR_URI"'#' ./deploy.yaml
      - sed -i.bak 's#DATE_STRING#'"$DATE"'#' ./deploy.yaml
      - kubectl apply -f ./deploy.yaml
      - kubectl apply -f ./svc.yaml
#      - printf '[{"name":"%s","imageUri":"%s"}]' $IMAGE_REPO_NAME $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG  > imagedefinitions.json
#  artifacts:
#    files: imagedefinitions.json 